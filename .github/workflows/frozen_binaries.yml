# This is a basic workflow to help you get started with Actions

name: Manual bundle

# Controls when the action will run.
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PROJECT: Pymca_release_test
  PROJECT_LOWER: pymca_release_test
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
# Fat binaries

  windows_pyinstaller_python38:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest ]
        python-version: [ "3.9" ]

    steps:
      - uses: actions/checkout@v2

#      - name: Download untar.py script
#        run: curl -o untar.py https://gitlab.esrf.fr/silx/bob/main/raw/master/untar.py
#
#      - name: Run untar.py
#        run: python untar.py "artifacts/${{ env.PROJECT }}*.tar.gz"

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install numpy
          pip install PyQt5
          pip install h5py
          pip install fisx
          pip install matplotlib==3.5.3
          pip install hdf5plugin
          pip install silx
          pip install PyOpenGL
          pip install qtconsole==5.4.1
          pip install PyInstaller
          pip install --pre --index-url https://test.pypi.org/simple/ --trusted-host test.pypi.org --only-binary Pymca_release_test Pymca_release_test
          pip install Cython
          pip install wheel
          pip install git+https://github.com/vasole/bcflight.git

      - name: Build with PyInstaller
        run: |
        #  cd ${{ env.PROJECT }}*
          python build-pyinstaller.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-pyinstaller-artifacts
          path: artifacts

  windows_cxfreeze_python38:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest ]
        python-version: [ "3.9" ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

#      - name: Download untar.py script
#        run: curl -o untar.py https://gitlab.esrf.fr/silx/bob/main/raw/master/untar.py
#
#      - name: Run untar.py
#        run: python untar.py "artifacts/${{ env.PROJECT }}*.tar.gz"

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install numpy==1.24.4
          pip install PyQt5
          pip install h5py
          pip install fisx
          pip install matplotlib==3.5.3
          pip install hdf5plugin
          pip install git+https://github.com/silx-kit/silx.git
          pip install PyOpenGL
          pip install qtconsole==5.4.1
          pip install lief==0.12.3
          pip install cx_Freeze==6.14.7
          pip install --pre --index-url https://test.pypi.org/simple/ --trusted-host test.pypi.org --only-binary Pymca_release_test Pymca_release_test
          pip install Cython
          pip install wheel
          pip install git+https://github.com/vasole/bcflight.git

      - name: Build with cx_Freeze
        shell: cmd
        run: |
        #  cd %PROJECT%*
          python build-cxfreeze.py
        #  xcopy ".\\dist\\*.exe" "..\\artifacts" /Y

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-cxfreeze-artifacts
          path: dist/*.exe

  macos11_pyinstaller_python312:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-12 ]
        python-version: [ "3.12" ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

#      - name: Extract artifact tarball
#        run: tar xvf ./artifacts/${{ env.PROJECT_LOWER }}*.tar.gz

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install --no-cache --trusted-host www.silx.org http://www.silx.org/pub/wheelhouse/universal2/numpy-1.26.2-cp312-cp312-macosx_10_9_universal2.whl
          pip install --no-cache --trusted-host www.silx.org http://www.silx.org/pub/wheelhouse/universal2/h5py-3.10.0-cp312-cp312-macosx_11_0_universal2.whl
          pip install --no-cache --trusted-host www.silx.org http://www.silx.org/pub/wheelhouse/universal2/psutil-5.9.6-cp312-abi3-macosx_10_9_universal2.whl
          pip install --no-cache --trusted-host www.silx.org http://www.silx.org/pub/wheelhouse/universal2/Pillow-10.1.0-cp312-cp312-macosx_11_0_universal2.whl
          pip install --no-cache --trusted-host www.silx.org http://www.silx.org/pub/wheelhouse/universal2/tornado-6.3.3-cp38-abi3-macosx_10_9_universal2.whl
          pip install --no-cache --trusted-host www.silx.org http://www.silx.org/pub/wheelhouse/universal2/contourpy-1.2.0-cp312-cp312-macosx_11_0_universal2.whl
          pip install --no-cache --trusted-host www.silx.org http://www.silx.org/pub/wheelhouse/universal2/kiwisolver-1.4.5-cp312-cp312-macosx_11_0_universal2.whl
          pip install cycler==0.12.1
          pip install fonttools==4.45.1
          pip install packaging==23.2
          pip install pyparsing==3.1.1
          pip install python_dateutil==2.8.2
          pip install --no-cache --trusted-host www.silx.org http://www.silx.org/pub/wheelhouse/universal2/matplotlib-3.8.2-cp312-cp312-macosx_11_0_universal2.whl
          pip install hdf5plugin
          pip install PySide6==6.6.0
          pip install lxml==4.9.3
          pip install --no-cache --trusted-host www.silx.org http://www.silx.org/pub/wheelhouse/universal2/fabio-2023.10.0-cp312-cp312-macosx_10_9_universal2.whl
          pip install fisx
          pip install git+https://github.com/silx-kit/silx.git
          pip install PyOpenGL
          pip install qtconsole==5.5.1
          pip install PyInstaller==6.2.0
          pip install Cython
          pip install wheel
          pip install --pre --index-url https://test.pypi.org/simple/ --trusted-host test.pypi.org --only-binary Pymca_release_test Pymca_release_test
          pip install git+https://github.com/vasole/bcflight.git

      - name: Build with PyInstaller (universal2)
        run: |
          cd ${{ env.PROJECT_LOWER }}*
          python build-pyinstaller.py universal2
          ls dist
          mkdir -p ../artifacts/eighthours
          cp dist/*.dmg ../artifacts/eighthours/
          # Uncomment if needed:
          # cp dist/*.pkg ../artifacts/eighthours/
          # cp -R dist/*.app ../artifacts/eighthours/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-pyinstaller-artifacts
          path: artifacts


  #    build_installers:
  #      needs: build
  #      runs-on: ${{ matrix.os }}
  #      strategy:
  #        # do not cancel tests after first fail
  #        fail-fast: false
  #        matrix:
  #          include:
  #
  #            - name-suffix: "PyQt6 wheel"
  #              os: macos-latest
  #              python-version: 3.12
  #              BUILD_COMMAND: --wheel
  #              QT_BINDING: PyQt6
  #              XVFB_RUN: ""
  #
  #            - name-suffix: "PySide6 wheel"
  #              os: windows-latest
  #              python-version: "3.9"
  #              BUILD_COMMAND: --wheel
  #              QT_BINDING: PySide6
  #              XVFB_RUN: ""
  #
  #      steps:
  #        - uses: actions/checkout@v2
  #
  #        - uses: actions/setup-python@v2
  #          with:
  #            python-version: ${{ matrix.python-version }}



  #        - name: Upload installer artifacts
  #          uses: actions/upload-artifact@v4
  #          with:
  #            name: installer-${{ matrix.os }}
  #            path: |
  #              package/pyinstaller/dist/PyMcaTest/*.exe
  #              package/pyinstaller/output/*.dmg
  #
  #        - name: Upload Windows executables to GitHub Release
  #          uses: softprops/action-gh-release@v1
  #          if: github.event_name == 'release' && runner.os == 'Windows'
  #          with:
  #            files: package/pyinstaller/dist/cy_py_test/*.exe
  #
  #        - name: Upload macOS dmg files to GitHub Release
  #          uses: softprops/action-gh-release@v1
  #          if: github.event_name == 'release' && runner.os == 'macOS'
  #          with:
  #            files: package/pyinstaller/output/*.dmg
    #
    #      - name: Upload to GitHub Release
    #        uses: softprops/action-gh-release@v1
    #        if: github.event_name == 'release'
    #        with:
    #          files: |
    #            packages/dist/cy_py_test/*.exe
    #            packages/output/*.dmg