# This is a basic workflow to help you get started with Actions

name: Manual release

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_and_test:
    name: "Python ${{ matrix.python-version }} on ${{ matrix.os }} ${{ matrix.name-suffix }}"
    runs-on: ${{ matrix.os }}
    strategy:
      # do not cancel tests after first fail
      fail-fast: false
      matrix:
        include:
          # python 3.8 leads to errors with cython\

          - name-suffix: "(Minimum Versions)"
            os: ubuntu-latest
            python-version: 3.9
            BUILD_COMMAND: --sdist
            QT_BINDING: PyQt5==5.14.1
            XVFB_RUN: xvfb-run -a

          - name-suffix: "PyQt6 wheel"
            os: macos-latest
            python-version: 3.12
            BUILD_COMMAND: --wheel
            QT_BINDING: PyQt6
            XVFB_RUN: ""

#          - name-suffix: "PyQt6 wheel"
#            os: windows-latest
#            python-version: "3.13"
#            BUILD_COMMAND: --wheel
#            QT_BINDING: PyQt6
#            XVFB_RUN: ""

          - name-suffix: "PySide6 wheel"
            os: windows-latest
            python-version: "3.11"
            BUILD_COMMAND: --wheel
            QT_BINDING: PySide6
            XVFB_RUN: ""

          - name-suffix: "PyQt5 wheel"
            os: windows-latest
            python-version: "3.9"
            BUILD_COMMAND: --wheel
            QT_BINDING: PyQt5
            XVFB_RUN: ""


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install OS dependencies
        if: runner.os == 'Linux' 
        run: |
            sudo apt-get update -yy
            sudo apt-get install -yy \
              libxkbcommon-x11-0 \
              libxkbcommon0 \
              libxkbcommon-dev \
              libxcb-icccm4 \
              libxcb-image0 \
              libxcb-shm0 \
              libxcb-keysyms1 \
              libxcb-randr0 \
              libxcb-render-util0 \
              libxcb-render0 \
              libxcb-shape0 \
              libxcb-sync1 \
              libxcb-xfixes0 \
              libxcb-xinerama0 \
              libxcb-xkb1 \
              libxcb1
            #export QT_QPA_PLATFORM=offscreen
            export DISPLAY=:99.0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Display the python version
      - name: Display Python version
        run:
          python -c "import sys; print(sys.version)"

      - name: Upgrade distribution modules
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel cython
          # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install build dependencies
        run: |
          pip install --upgrade wheel
          pip install --upgrade numpy
          pip install --upgrade build
          # put cython
          pip install cython

      - name: Install runtime dependencies
        run: |
          # pip install silx --pre --find-links https://silx.gitlab-pages.esrf.fr/bob/silx/
          pip install ${{ matrix.QT_BINDING }}
          
      - name: Print python info
        run: |
           python ./ci/info_platform.py
           pip list

      - name: Generate source package or wheel
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.9" # do nothing if not MacOS
        run: |
          python -m build ${{ matrix.BUILD_COMMAND }}
          ls dist

      - name: Install
        run: |
         pip install --pre "$(ls dist/*test-5.*)"
        # pip install --pre "$(ls dist/*ca5-5.*)"

      - name: Run the tests
        run: |
          cd ..
          ${{ matrix.XVFB_RUN }} python -m PyMca5.tests.TestAll

      - name: Upload wheel as artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-dist
          path: dist/*.tar.gz

      - name: Upload wheel as artifact
        if: runner.os != 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-python${{ matrix.python-version }}-${{ matrix.QT_BINDING }}-dist
          path: dist/*.whl

  upload_to_testpypi:
    name: Upload all wheels to TestPyPI
    runs-on: macos-latest
    needs: build_and_test
    if: ${{ success() }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-artifacts

      - name: List all downloaded files
        run: ls -R dist-artifacts

#      - name: Verify package names before upload
#        run: |
#          EXPECTED_NAME="Pymca_release_test"
#          shopt -s nullglob
#          for file in dist/*.whl; do
#            if [[ $file == *.whl ]]; then
#              NAME=$(unzip -p "$file" "*.dist-info/METADATA" | grep ^Name: | awk '{print $2}')
#            else
#              NAME=$(tar -xOzf "$file" */PKG-INFO | grep ^Name: | awk '{print $2}')
#            fi
#
#            if [[ "$NAME" != "$EXPECTED_NAME" ]]; then
#              echo "ERROR: Package name mismatch in $file. Found: $NAME, expected: $EXPECTED_NAME"
#              exit 1
#            else
#              echo "Verified package name: $NAME in $file"
#            fi
#          done
      - name: Upgrade
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_PASSWORD }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade twine

      - name: List files to be uploaded
        run: |
          find dist-artifacts -type f \( -name '*.whl' -o -name '*.tar.gz' \)

      - name: Upload wheels to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_PASSWORD }}
        run:
          files=$(find dist-artifacts -type f \( -name '*.whl' -o -name '*.tar.gz' \))
          echo "Uploading files:"
          echo "$files"
          python -m twine upload --verbose --repository testpypi $files

#      - name: Upload wheels to TestPyPI
#        if: runner.os != 'Linux'
#        env:
#          TWINE_USERNAME: __token__
#          TWINE_PASSWORD: ${{ secrets.TESTPYPI_PASSWORD }}
#        run: |
#          python -m pip install --upgrade twine
#          python -m twine upload --verbose --repository testpypi dist/*.whl
        



